---
title: Introduction
subtitle: Deploy and maintain models with vetiver (R)
format: html
---

## Explore the data üëÄ

```{r}
library(tidyverse)
library(arrow)
path <- here::here("data", "housing.parquet")
housing <- read_parquet(path)
glimpse(housing)
```

Explore the `housing` data on your own!

```{r}
housing |> 
  group_by(waterfront) |>
  summarize(price = mean(price))
```

```{r}
## more EDA here
housing |>
  ggplot(mapping = aes(x = date, y = price)) +
  # geom_point() +
  geom_smooth()

ggplot(data = housing, mapping = aes(x = waterfront, y = price)) +
  geom_boxplot()

# log-log regression for sqft living and price
ggplot(data = housing, mapping = aes(x = sqft_living, y = price)) +
  geom_point(alpha = 0.05) +
  geom_smooth(method = "lm") +
  scale_x_log10() +
  scale_y_log10()

ggplot(data = housing, mapping = aes(x = yr_built, y = price)) +
  geom_point(alpha = 0.05) +
  geom_smooth() +
  # scale_x_continuous(breaks = seq(1900, 2020, 10)) +
  scale_y_log10()

ggplot(data = housing, mapping = aes(x = as.factor(bedrooms))) +
  geom_bar()

ggplot(data = housing, mapping = aes(x = bathrooms)) +
  geom_bar()

ggplot(data = housing, mapping = aes(x = sqft_living)) +
  geom_histogram(bins = 50, color = "white")
```

## Build a model üîß

Spend your data budget:

```{r}
library(tidymodels)
set.seed(123)
housing_split <- housing |>
  mutate(price = log10(price)) |>
  initial_split(prop = 0.8)
housing_train <- training(housing_split)
housing_test <- testing(housing_split)
```

Train a linear regression model:

```{r}
housing_fit <-
  workflow(
    price ~ bedrooms + bathrooms + sqft_living + yr_built, 
    linear_reg()
    ) |> 
  fit(data = housing_train)
```

## Create a deployable model object üè∫

```{r}
library(vetiver)
v <- vetiver_model(housing_fit, "seattle-house-tree")
v
```

```{r}
## create a vetiver model with a custom description
v <- vetiver_model(housing_fit, "seattle-house-tree", description = "A decision tree model for (logged) Seattle house prices")
v
```

## Version your model üìå

```{r}
library(pins)

board <- board_temp()
board |> vetiver_pin_write(v)
```

```{r}
## retrieve your model metadata
board |> pin_meta("seattle-house-tree")
```

## Publish your model on Posit Connect üöÄ

Set up publishing to Connect from RStudio: <https://docs.posit.co/connect/user/publishing/>

```{r}
## create a vetiver model with a custom description
v <- vetiver_model(housing_fit, "bensoltoff/seattle-house-tree", description = "A decision tree model for (logged) Seattle house prices")
v

## now write your model pin to Posit Connect
board <- board_connect(auth = "envvar", server = "https://pub.vetiver.posit.team/")
board |> vetiver_pin_write(v)
```

Visit your pin's homepage on Connect.

## Store a new version üëØ

Train your model with a new algorithm:

```{r}
housing_fit <-
  workflow(
    price ~ bedrooms + bathrooms + sqft_living + yr_built,
    linear_reg()
  ) |>
  fit(data = housing_train)
```

Store this new model as a new version of the same pin:

```{r}
v <- vetiver_model(housing_fit, "bensoltoff/seattle-house-tree", description = "A decision tree model for (logged) Seattle house prices")
v

## now write your model pin to Posit Connect
board |> vetiver_pin_write(v)
```

What versions do you have?

```{r}
board |> pin_versions("bensoltoff/seattle-house-tree")
```
